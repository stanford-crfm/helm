const t=(t,e)=>{const n=new Map;return t.forEach(((t,r)=>{n.set(t,e[r])})),n},e=(t,e,n)=>[t?"auto":null!=e?e:0,null!=n?n:"auto"],n=(t,e)=>{if(!e)return[];const n=new Set;return t.forEach((t=>{n.add(t[e])})),Array.from(n)};function r(t,e){if(t===e)return!0;if("object"!=typeof t||"object"!=typeof e||null===t||null===e)return!1;const n=Object.keys(t),o=Object.keys(e);if(n.length!==o.length)return!1;for(const u of n)if(!o.includes(u)||!r(t[u],e[u]))return!1;return!0}function o(t,e){const n=new Set;for(const r of t)if(Object.prototype.hasOwnProperty.call(r,e)&&(n.add(r[e]),n.size>1))return!1;return!0}export{n as constructCategories,t as constructCategoryColors,r as deepEqual,e as getYAxisDomain,o as hasOnlyOneValueForThisKey};
